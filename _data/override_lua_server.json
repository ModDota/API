{
    "CBaseEntity": {
        "functions": {
            "FirstMoveChild": {
                "args": [],
                "return": "CBaseEntity"
            },
            "FollowEntity": {
                "arg_names": [
                    "hEnt",
                    "bBoneMerge"
                ],
                "args": [
                    "CBaseEntity",
                    "bool"
                ],
                "description": "hEntity to follow, bool bBoneMerge",
                "return": "void"
            },
            "GetMoveParent": {
                "args": [],
                "description": "If in hierarchy, retrieves the entity's parent.",
                "return": "CBaseEntity"
            },
            "GetOwner": {
                "args": [],
                "description": "Gets this entity's owner",
                "return": "CBaseEntity"
            },
            "GetOwnerEntity": {
                "args": [],
                "description": "Get the owner entity, if there is one",
                "return": "CBaseEntity"
            },
            "GetRootMoveParent": {
                "args": [],
                "description": "If in hierarchy, walks up the hierarchy to find the root parent.",
                "return": "CBaseEntity"
            },
            "GetTeam": {
                "args": [],
                "description": "Get the team number of this entity.",
                "return": "DOTATeam_t"
            },
            "GetTeamNumber": {
                "args": [],
                "description": "Get the team number of this entity.",
                "return": "DOTATeam_t"
            },
            "NextMovePeer": {
                "args": [],
                "return": "CBaseEntity"
            },
            "SetOwner": {
                "arg_names": [
                    "pOwner"
                ],
                "args": [
                    "CBaseEntity"
                ],
                "description": "Sets this entity's owner",
                "return": "void"
            },
            "SetTeam": {
                "arg_names": [
                    "iTeamNum"
                ],
                "args": [
                    "DOTATeam_t"
                ],
                "return": "void"
            }
        }
    },
    "CBaseTrigger": {
        "functions": {
            "IsTouching": {
                "arg_names": [
                    "hEnt"
                ],
                "args": [
                    "CBaseEntity"
                ],
                "description": "Checks whether the passed entity is touching the trigger.",
                "return": "bool"
            }
        }
    },
    "CCustomGameEventManager": {
        "functions": {
            "RegisterListener": {
                "args": [
                    "cstring",
                    "function"
                ],
                "description": "( string EventName, func CallbackFunction ) - Register a callback to be called when a particular custom event arrives. Returns a listener ID that can be used to unregister later.",
                "return": "CCustomGameEventListener",
                "arg_names": [
                    "eventName",
                    "handler"
                ]
            },
            "Send_ServerToAllClients": {
                "args": [
                    "cstring",
                    "table"
                ],
                "description": "( string EventName, table EventData )",
                "return": "void",
                "arg_names": [
                    "eventName",
                    "eventData"
                ]
            },
            "Send_ServerToPlayer": {
                "args": [
                    "CDOTAPlayer",
                    "cstring",
                    "table"
                ],
                "description": "( Entity Player, string EventName, table EventData )",
                "return": "void",
                "arg_names": [
                    "player",
                    "eventName",
                    "eventData"
                ]
            },
            "Send_ServerToTeam": {
                "args": [
                    "DOTATeam_t",
                    "cstring",
                    "table"
                ],
                "description": "( int TeamNumber, string EventName, table EventData )",
                "return": "void",
                "arg_names": [
                    "team",
                    "eventName",
                    "eventData"
                ]
            },
            "UnregisterListener": {
                "args": [
                    "CCustomGameEventListener"
                ],
                "description": "( int ListnerID ) - Unregister a specific listener",
                "return": "void",
                "arg_names": [
                    "listener"
                ]
            }
        }
    },
    "CDOTABaseAbility": {
        "functions": {
            "CanAbilityBeUpgraded": {
                "args": [],
                "return": "boolean"
            },
            "GetAbilityDamageType": {
                "args": [],
                "return": "DAMAGE_TYPES"
            },
            "GetAbilityKeyValues": {
                "args": [],
                "description": "Gets the key values definition for this ability.",
                "return": "table"
            },
            "GetAbilityTargetFlags": {
                "args": [],
                "return": "DOTA_UNIT_TARGET_FLAGS"
            },
            "GetAbilityTargetTeam": {
                "args": [],
                "return": "DOTA_UNIT_TARGET_TEAM"
            },
            "GetAbilityTargetType": {
                "args": [],
                "return": "DOTA_UNIT_TARGET_TYPE"
            },
            "GetCastRange": {
                "arg_names": [
                    "vLocation",
                    "hTarget"
                ],
                "args": [
                    "vector",
                    "CDOTA_BaseNPC"
                ],
                "description": "Gets the cast range of the ability.",
                "return": "int"
            },
            "GetCaster": {
                "args": [],
                "return": "CDOTA_BaseNPC"
            },
            "GetCloneSource": {
                "args": [],
                "return": "CDOTA_BaseNPC"
            },
            "GetCursorTarget": {
                "args": [],
                "return": "CDOTA_BaseNPC"
            },
            "GetLevelSpecialValueFor": {
                "arg_names": [
                    "valueName",
                    "nLevel"
                ],
                "args": [
                    "cstring",
                    "int"
                ],
                "return": "number"
            },
            "GetSpecialValueFor": {
                "arg_names": [
                    "valueName"
                ],
                "args": [
                    "cstring"
                ],
                "description": "Gets a value from this ability's special value block for its current level.",
                "return": "number"
            },
            "IsCosmetic": {
                "arg_names": [
                    "hEntity"
                ],
                "args": [
                    "CBaseEntity"
                ],
                "return": "bool"
            }
        }
    },
    "CDOTABaseGameMode": {
        "functions": {
            "GetCustomAttributeDerivedStatValue": {
                "arg_names": [
                    "nDerivedStatType",
                    "hHero"
                ],
                "args": [
                    "AttributeDerivedStats",
                    "CDOTA_BaseNPC_Hero"
                ],
                "description": "Get current derived stat value constant.",
                "return": "float"
            },
            "SetAbilityTuningValueFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control the tuning values that abilities use. (Modify the table and Return true to use new values, return false to use the old values)",
                "return": "void"
            },
            "SetBountyRunePickupFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control the behavior when a bounty rune is picked up. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void"
            },
            "SetCustomAttributeDerivedStatValue": {
                "arg_names": [
                    "nStatType",
                    "flNewValue"
                ],
                "args": [
                    "AttributeDerivedStats",
                    "float"
                ],
                "description": "Modify derived stat value constants. ( AttributeDerivedStat eStatType, float flNewValue.",
                "return": "void"
            },
            "SetCustomHeroMaxLevel": {
                "arg_names": [
                    "iMaxLevel"
                ],
                "args": [
                    "int"
                ],
                "description": "Allows definition of the max level heroes can achieve (default is 25).",
                "return": "void"
            },
            "SetCustomXPRequiredToReachNextLevel": {
                "arg_names": [
                    "hTable"
                ],
                "args": [
                    "table"
                ],
                "description": "Allows definition of a table of hero XP values.",
                "return": "void"
            },
            "SetDamageFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control the behavior when a unit takes damage. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void"
            },
            "SetExecuteOrderFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(order: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control the behavior when a unit picks up an item. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void"
            },
            "SetHUDVisible": {
                "arg_names": [
                    "iHUDElement",
                    "bVisible"
                ],
                "args": [
                    "DOTAHUDVisibility_t",
                    "bool"
                ],
                "description": "Set the HUD element visibility.",
                "return": "void"
            },
            "SetHealingFilter": {
                "arg_names": [
                    "hFunction",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control the behavior when a unit heals. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void"
            },
            "SetItemAddedToInventoryFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control what happens to items that are added to an inventory, return false to cancel the event",
                "return": "void"
            },
            "SetModifierGainedFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control modifiers that are gained, return false to destroy modifier.",
                "return": "void"
            },
            "SetModifyExperienceFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control the behavior when a hero's experience is modified. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void"
            },
            "SetModifyGoldFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control the behavior when a hero's gold is modified. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void"
            },
            "SetOverrideSelectionEntity": {
                "arg_names": [
                    "hOverrideEntity"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "Set an override for the default selection entity, instead of each player's hero.",
                "return": "void"
            },
            "SetRuneEnabled": {
                "arg_names": [
                    "nRune",
                    "bEnabled"
                ],
                "args": [
                    "DOTA_RUNES",
                    "bool"
                ],
                "description": "Set if a given type of rune is enabled.",
                "return": "void"
            },
            "SetRuneSpawnFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control what rune spawns. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void"
            },
            "SetTopBarTeamValue": {
                "arg_names": [
                    "iTeam",
                    "nValue"
                ],
                "args": [
                    "DOTATeam_t",
                    "int"
                ],
                "description": "Set the team values on the top game bar.",
                "return": "void"
            },
            "SetTrackingProjectileFilter": {
                "arg_names": [
                    "filterFunc",
                    "hContext"
                ],
                "args": [
                    "fun(event: table): boolean",
                    "table"
                ],
                "description": "Set a filter function to control when tracking projectiles are launched. (Modify the table and Return true to use new values, return false to cancel the event)",
                "return": "void"
            }
        }
    },
    "CDOTAGamerules": {
        "functions": {
            "BeginNightstalkerNight": {
                "args": [
                    "float"
                ],
                "description": "Begin night stalker night.",
                "return": "void",
                "arg_names": [
                    "duration"
                ]
            },
            "BeginTemporaryNight": {
                "args": [
                    "float"
                ],
                "description": "Begin temporary night.",
                "return": "void",
                "arg_names": [
                    "duration"
                ]
            },
            "EnableCustomGameSetupAutoLaunch": {
                "args": [
                    "bool"
                ],
                "description": "Enabled (true) or disable (false) auto launch for custom game setup.",
                "return": "void",
                "arg_names": [
                    "enabled"
                ]
            },
            "GetCustomGameTeamMaxPlayers": {
                "args": [
                    "DOTATeam_t"
                ],
                "description": "Get whether a team is selectable during game setup",
                "return": "int",
                "arg_names": [
                    "team"
                ]
            },
            "GetDOTATime": {
                "args": [
                    "bool",
                    "bool"
                ],
                "description": "(b IncludePregameTime b IncludeNegativeTime) Returns the actual DOTA in-game clock time.",
                "return": "float",
                "arg_names": [
                    "includePreGame",
                    "includeNegativeTime"
                ]
            },
            "GetDroppedItem": {
                "args": [
                    "int"
                ],
                "description": "Gets the Xth dropped item",
                "return": "CDOTA_Item",
                "arg_names": [
                    "index"
                ]
            },
            "GetGameModeEntity": {
                "args": [],
                "description": "Get the game mode entity",
                "return": "CDOTABaseGameMode"
            },
            "LockCustomGameSetupTeamAssignment": {
                "args": [
                    "bool"
                ],
                "description": "Lock (true) or unlock (false) team assignemnt. If team assignment is locked players cannot change teams.",
                "return": "void",
                "arg_names": [
                    "locked"
                ]
            },
            "MakeTeamLose": {
                "args": [
                    "DOTATeam_t"
                ],
                "description": "Makes the specified team lose",
                "return": "void",
                "arg_names": [
                    "team"
                ]
            },
            "PlayerHasCustomGameHostPrivileges": {
                "args": [
                    "CDOTAPlayer"
                ],
                "description": "Whether a player has custom game host privileges (shuffle teams, etc.)",
                "return": "bool",
                "arg_names": [
                    "player"
                ]
            },
            "SetCreepMinimapIconScale": {
                "args": [
                    "float"
                ],
                "description": "(flMinimapCreepIconScale) - Scale the creep icons on the minimap.",
                "return": "void",
                "arg_names": [
                    "scale"
                ]
            },
            "SetCustomGameAllowBattleMusic": {
                "args": [
                    "bool"
                ],
                "description": "Sets a flag to enable/disable the default music handling code for custom games",
                "return": "void",
                "arg_names": [
                    "allow"
                ]
            },
            "SetCustomGameAllowHeroPickMusic": {
                "args": [
                    "bool"
                ],
                "description": "Sets a flag to enable/disable the default music handling code for custom games",
                "return": "void",
                "arg_names": [
                    "allow"
                ]
            },
            "SetCustomGameAllowMusicAtGameStart": {
                "args": [
                    "bool"
                ],
                "description": "Sets a flag to enable/disable the default music handling code for custom games",
                "return": "void",
                "arg_names": [
                    "allow"
                ]
            },
            "SetCustomGameDifficulty": {
                "args": [
                    "int"
                ],
                "description": "Set the difficulty level of the custom game mode",
                "return": "void",
                "arg_names": [
                    "difficulty"
                ]
            },
            "SetCustomGameEndDelay": {
                "args": [
                    "float"
                ],
                "description": "Sets the game end delay.",
                "return": "void",
                "arg_names": [
                    "delay"
                ]
            },
            "SetCustomGameSetupAutoLaunchDelay": {
                "args": [
                    "float"
                ],
                "description": "Set the amount of time to wait for auto launch.",
                "return": "void",
                "arg_names": [
                    "delay"
                ]
            },
            "SetCustomGameSetupRemainingTime": {
                "args": [
                    "float"
                ],
                "description": "Set the amount of remaining time, in seconds, for custom game setup. 0 = finish immediately, -1 = wait forever",
                "return": "void",
                "arg_names": [
                    "remainingTime"
                ]
            },
            "SetCustomGameSetupTimeout": {
                "args": [
                    "float"
                ],
                "description": "Setup (pre-gameplay) phase timeout. 0 = instant, -1 = forever (until FinishCustomGameSetup is called)",
                "return": "void",
                "arg_names": [
                    "timeout"
                ]
            },
            "SetCustomGameTeamMaxPlayers": {
                "args": [
                    "DOTATeam_t",
                    "int"
                ],
                "description": "Set whether a team is selectable during game setup",
                "return": "void",
                "arg_names": [
                    "team",
                    "maxPlayers"
                ]
            },
            "SetCustomVictoryMessage": {
                "args": [
                    "cstring"
                ],
                "description": "Sets the victory message.",
                "return": "void",
                "arg_names": [
                    "message"
                ]
            },
            "SetCustomVictoryMessageDuration": {
                "args": [
                    "float"
                ],
                "description": "Sets the victory message duration.",
                "return": "void",
                "arg_names": [
                    "duration"
                ]
            },
            "SetFirstBloodActive": {
                "args": [
                    "bool"
                ],
                "description": "Sets whether First Blood has been triggered.",
                "return": "void",
                "arg_names": [
                    "active"
                ]
            },
            "SetGameWinner": {
                "args": [
                    "DOTATeam_t"
                ],
                "description": "Makes the specified team win",
                "return": "void",
                "arg_names": [
                    "team"
                ]
            },
            "SetGoldPerTick": {
                "args": [
                    "int"
                ],
                "description": "Set the auto gold increase per timed interval.",
                "return": "void",
                "arg_names": [
                    "amount"
                ]
            },
            "SetGoldTickTime": {
                "args": [
                    "float"
                ],
                "description": "Set the time interval between auto gold increases.",
                "return": "void",
                "arg_names": [
                    "time"
                ]
            },
            "SetHeroMinimapIconScale": {
                "args": [
                    "float"
                ],
                "description": "(flMinimapHeroIconScale) - Scale the hero minimap icons on the minimap.",
                "return": "void",
                "arg_names": [
                    "scale"
                ]
            },
            "SetHeroRespawnEnabled": {
                "args": [
                    "bool"
                ],
                "description": "Control if the normal DOTA hero respawn rules apply.",
                "return": "void",
                "arg_names": [
                    "enabled"
                ]
            },
            "SetHeroSelectionTime": {
                "args": [
                    "float"
                ],
                "description": "Sets the amount of time players have to pick their hero.",
                "return": "void",
                "arg_names": [
                    "selectionTime"
                ]
            },
            "SetHideKillMessageHeaders": {
                "args": [
                    "bool"
                ],
                "description": "Sets whether the multikill, streak, and first-blood banners appear at the top of the screen.",
                "return": "void",
                "arg_names": [
                    "hideHeaders"
                ]
            },
            "SetOverlayHealthBarUnit": {
                "args": [
                    "CDOTA_BaseNPC",
                    "int"
                ],
                "description": "Show this unit's health on the overlay health bar",
                "return": "void",
                "arg_names": [
                    "unit",
                    "style"
                ]
            },
            "SetPostGameTime": {
                "args": [
                    "float"
                ],
                "description": "Sets the amount of time players have between the game ending and the server disconnecting them.",
                "return": "void",
                "arg_names": [
                    "time"
                ]
            },
            "SetPreGameTime": {
                "args": [
                    "float"
                ],
                "description": "Sets the amount of time players have between picking their hero and game start.",
                "return": "void",
                "arg_names": [
                    "time"
                ]
            },
            "SetRuneMinimapIconScale": {
                "args": [
                    "float"
                ],
                "description": "(flMinimapRuneIconScale) - Scale the rune icons on the minimap.",
                "return": "void",
                "arg_names": [
                    "flMinimapRuneIconScale"
                ]
            },
            "SetRuneSpawnTime": {
                "args": [
                    "float"
                ],
                "description": "Sets the amount of time between rune spawns.",
                "return": "void",
                "arg_names": [
                    "time"
                ]
            },
            "SetSafeToLeave": {
                "args": [
                    "bool"
                ],
                "description": "(bSafeToLeave) - Mark this game as safe to leave.",
                "return": "void",
                "arg_names": [
                    "bSafeToLeave"
                ]
            },
            "SetSameHeroSelectionEnabled": {
                "args": [
                    "bool"
                ],
                "description": "When true, players can repeatedly pick the same hero.",
                "return": "void",
                "arg_names": [
                    "enabled"
                ]
            },
            "SetShowcaseTime": {
                "args": [
                    "float"
                ],
                "description": "Sets the amount of time players have between the strategy phase and entering the pre-game phase.",
                "return": "void",
                "arg_names": [
                    "time"
                ]
            },
            "SetStartingGold": {
                "args": [
                    "int"
                ],
                "description": "Set the starting gold amount.",
                "return": "void",
                "arg_names": [
                    "amount"
                ]
            },
            "SetStrategyTime": {
                "args": [
                    "float"
                ],
                "description": "Sets the amount of time players have between the hero selection and entering the showcase phase.",
                "return": "void",
                "arg_names": [
                    "time"
                ]
            },
            "SetTimeOfDay": {
                "args": [
                    "float"
                ],
                "description": "Set the time of day.",
                "return": "void",
                "arg_names": [
                    "time"
                ]
            },
            "SetTreeRegrowTime": {
                "args": [
                    "float"
                ],
                "description": "Sets the tree regrow time in seconds.",
                "return": "void",
                "arg_names": [
                    "time"
                ]
            },
            "SetUseBaseGoldBountyOnHeroes": {
                "args": [
                    "bool"
                ],
                "description": "Heroes will use the basic NPC functionality for determining their bounty, rather than DOTA specific formulas.",
                "return": "void",
                "arg_names": [
                    "useBaseGoldBounties"
                ]
            },
            "SetUseCustomHeroXPValues": {
                "args": [
                    "bool"
                ],
                "description": "Allows heroes in the map to give a specific amount of XP (this value must be set).",
                "return": "void",
                "arg_names": [
                    "useCustomXPValues"
                ]
            },
            "SetUseUniversalShopMode": {
                "args": [
                    "bool"
                ],
                "description": "When true, all items are available at as long as any shop is in range.",
                "return": "void",
                "arg_names": [
                    "useUniversalShopMode"
                ]
            },
            "State_Get": {
                "args": [],
                "description": "Get the current Gamerules state",
                "return": "DOTA_GameState"
            }
        }
    },
    "CDOTAPlayer": {
        "functions": {
            "GetAssignedHero": {
                "args": [],
                "description": "Get the player's hero.",
                "return": "CDOTA_BaseNPC_Hero"
            },
            "SetKillCamUnit": {
                "arg_names": [
                    "hEntity"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "Set the kill cam unit for this hero.",
                "return": "void"
            }
        }
    },
    "CDOTATutorial": {
        "functions": {
            "AddBot": {
                "args": [
                    "cstring",
                    "cstring",
                    "cstring",
                    "bool"
                ],
                "description": "Add a computer controlled bot.",
                "return": "bool",
                "arg_names": [
                    "heroName",
                    "unknown1",
                    "unknown2",
                    "unknown3"
                ]
            },
            "AddShopWhitelistItem": {
                "args": [
                    "cstring"
                ],
                "description": "Add an item to the shop whitelist.",
                "return": "void",
                "arg_names": [
                    "itemName"
                ]
            },
            "IsItemInWhiteList": {
                "args": [
                    "cstring"
                ],
                "description": "Is this item currently in the white list.",
                "return": "bool",
                "arg_names": [
                    "itemName"
                ]
            },
            "RemoveShopWhitelistItem": {
                "args": [
                    "cstring"
                ],
                "description": "Remove an item from the shop whitelist.",
                "return": "void",
                "arg_names": [
                    "itemName"
                ]
            },
            "SelectHero": {
                "args": [
                    "cstring"
                ],
                "description": "Select a hero for the local player",
                "return": "void",
                "arg_names": [
                    "heroName"
                ]
            },
            "SetOrModifyPlayerGold": {
                "args": [
                    "int",
                    "bool"
                ],
                "description": "Set gold amount for the tutorial player. (int) GoldAmount, (bool) true=Set, false=Modify",
                "return": "void",
                "arg_names": [
                    "goldAmount",
                    "setNotModify"
                ]
            },
            "SetQuickBuy": {
                "args": [
                    "cstring"
                ],
                "description": "Set players quick buy item.",
                "return": "void",
                "arg_names": [
                    "itemName"
                ]
            },
            "SetShopOpen": {
                "args": [
                    "bool"
                ],
                "description": "Set the shop open or closed.",
                "return": "void",
                "arg_names": [
                    "open"
                ]
            },
            "SetTimeFrozen": {
                "args": [
                    "bool"
                ],
                "description": "Set if we should freeze time or not.",
                "return": "void",
                "arg_names": [
                    "timeFrozen"
                ]
            },
            "SetWhiteListEnabled": {
                "args": [
                    "bool"
                ],
                "description": "Set if we should whitelist shop items.",
                "return": "void",
                "arg_names": [
                    "whitelistEnabled"
                ]
            },
            "UpgradePlayerAbility": {
                "args": [
                    "cstring"
                ],
                "description": "Upgrade a specific ability for the local hero",
                "return": "void",
                "arg_names": [
                    "abilityName"
                ]
            }
        }
    },
    "CDOTA_Ability_DataDriven": {
        "functions": {
            "ApplyDataDrivenModifier": {
                "arg_names": [
                    "caster",
                    "target",
                    "modifier_name",
                    "modifier_table"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "CDOTA_BaseNPC",
                    "string",
                    "table"
                ],
                "description": "Applies a data driven modifier to the target",
                "return": "CDOTA_Buff"
            }
        }
    },
    "CDOTA_Ability_Lua": {
        "functions": {
            "CastFilterResult": {
                "args": [],
                "description": "Determine whether an issued command with no target is valid.",
                "return": "UnitFilterResult"
            },
            "CastFilterResultLocation": {
                "arg_names": [
                    "vLocation"
                ],
                "args": [
                    "vector"
                ],
                "description": "(Vector vLocation) Determine whether an issued command on a location is valid.",
                "return": "UnitFilterResult"
            },
            "CastFilterResultTarget": {
                "arg_names": [
                    "hTarget"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "(HSCRIPT hTarget) Determine whether an issued command on a target is valid.",
                "return": "UnitFilterResult"
            },
            "GetBehavior": {
                "args": [],
                "description": "Return cast behavior type of this ability.",
                "return": "DOTA_ABILITY_BEHAVIOR"
            },
            "GetCastAnimation": {
                "args": [],
                "description": "Return casting animation of this ability.",
                "return": "GameActivity_t"
            },
            "GetCastRange": {
                "arg_names": [
                    "vLocation",
                    "hTarget"
                ],
                "args": [
                    "vector",
                    "CDOTA_BaseNPC"
                ],
                "description": "Return cast range of this ability.",
                "return": "int"
            },
            "GetChannelAnimation": {
                "args": [],
                "description": "Return channel animation of this ability.",
                "return": "GameActivity_t"
            },
            "GetCustomCastErrorTarget": {
                "arg_names": [
                    "hTarget"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "(HSCRIPT hTarget) Return the error string of a failed command on a target.",
                "return": "cstring"
            },
            "OnHeroDiedNearby": {
                "arg_names": [
                    "unit",
                    "attacker",
                    "event"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "CDOTA_BaseNPC",
                    "table"
                ],
                "description": "A hero has died in the vicinity (ie Urn), takes table of params.",
                "return": "void"
            },
            "OnItemEquipped": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "( HSCRIPT hItem ) Caster equipped item.",
                "return": "void"
            },
            "OnProjectileHit": {
                "arg_names": [
                    "hTarget",
                    "vLocation"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "vector"
                ],
                "description": "(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid).",
                "return": "bool"
            },
            "OnProjectileHitHandle": {
                "arg_names": [
                    "hTarget",
                    "vLocation",
                    "iProjectileHandle"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "vector",
                    "CProjectileID"
                ],
                "description": "(HSCRIPT hTarget, Vector vLocation, int nHandle) Projectile has collided with a given target or reached its destination (target is invalid).",
                "return": "bool"
            },
            "OnProjectileHit_ExtraData": {
                "arg_names": [
                    "hTarget",
                    "vLocation",
                    "data"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "vector",
                    "table"
                ],
                "description": "(HSCRIPT hTarget, Vector vLocation, table kv) Projectile has collided with a given target or reached its destination (target is invalid).",
                "return": "bool"
            },
            "OnProjectileThinkHandle": {
                "arg_names": [
                    "iProjectileHandle"
                ],
                "args": [
                    "CProjectileID"
                ],
                "description": "(int nProjectileHandle) Projectile is actively moving.",
                "return": "void"
            },
            "OnProjectileThink_ExtraData": {
                "arg_names": [
                    "vLocation",
                    "data"
                ],
                "args": [
                    "vector",
                    "table"
                ],
                "description": "(Vector vLocation, table kv ) Projectile is actively moving.",
                "return": "void"
            },
            "OnStolen": {
                "arg_names": [
                    "hSourceAbility"
                ],
                "args": [
                    "CDOTABaseAbility"
                ],
                "description": "( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal.",
                "return": "void"
            }
        }
    },
    "CDOTA_BaseNPC": {
        "functions": {
            "AddAbility": {
                "arg_names": [
                    "ability_name"
                ],
                "args": [
                    "string"
                ],
                "description": "Add an ability to this unit by name.",
                "return": "CDOTABaseAbility"
            },
            "AddItem": {
                "arg_names": [
                    "item_to_add"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "Add an item to this unit's inventory.",
                "return": "CDOTA_Item"
            },
            "AddItemByName": {
                "arg_names": [
                    "item_name"
                ],
                "args": [
                    "string"
                ],
                "description": "Add an item to this unit's inventory.",
                "return": "CDOTA_Item"
            },
            "AddNewModifier": {
                "arg_names": [
                    "caster",
                    "source_ability",
                    "modifier_name",
                    "modifier_table"
                ],
                "args": [
                    "CDOTA_BaseNPC?",
                    "CDOTABaseAbility?",
                    "string",
                    "table"
                ],
                "description": "Add a modifier to this unit.",
                "return": "CDOTA_Buff"
            },
            "AlertNearbyUnits": {
                "arg_names": [
                    "hAttacker",
                    "hAbility"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "CDOTABaseAbility"
                ],
                "return": "void"
            },
            "CanEntityBeSeenByMyTeam": {
                "arg_names": [
                    "hEntity"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "Check FoW to see if an entity is visible.",
                "return": "bool"
            },
            "CastAbilityImmediately": {
                "arg_names": [
                    "hAbility",
                    "iPlayerIndex"
                ],
                "args": [
                    "CDOTABaseAbility",
                    "int"
                ],
                "description": "Cast an ability immediately.",
                "return": "void"
            },
            "CastAbilityNoTarget": {
                "arg_names": [
                    "hAbility",
                    "iPlayerIndex"
                ],
                "args": [
                    "CDOTABaseAbility",
                    "int"
                ],
                "description": "Cast an ability with no target.",
                "return": "void"
            },
            "CastAbilityOnPosition": {
                "arg_names": [
                    "vPosition",
                    "hAbility",
                    "iPlayerIndex"
                ],
                "args": [
                    "vector",
                    "CDOTABaseAbility",
                    "int"
                ],
                "description": "Cast an ability on a position.",
                "return": "void"
            },
            "CastAbilityOnTarget": {
                "arg_names": [
                    "hTarget",
                    "hAbility",
                    "iPlayerIndex"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "CDOTABaseAbility",
                    "int"
                ],
                "description": "Cast an ability on a target entity.",
                "return": "void"
            },
            "CastAbilityToggle": {
                "arg_names": [
                    "hAbility",
                    "iPlayerIndex"
                ],
                "args": [
                    "CDOTABaseAbility",
                    "int"
                ],
                "description": "Toggle an ability.",
                "return": "void"
            },
            "DisassembleItem": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "Disassemble the passed item in this unit's inventory.",
                "return": "void"
            },
            "DropItemAtPosition": {
                "arg_names": [
                    "vDest",
                    "hItem"
                ],
                "args": [
                    "vector",
                    "CDOTA_Item"
                ],
                "description": "Drop an item at a given point.",
                "return": "void"
            },
            "DropItemAtPositionImmediate": {
                "arg_names": [
                    "hItem",
                    "vPosition"
                ],
                "args": [
                    "CDOTA_Item",
                    "vector"
                ],
                "description": "Immediately drop a carried item at a given position.",
                "return": "void"
            },
            "EjectItemFromStash": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "Drops the selected item out of this unit's stash.",
                "return": "void"
            },
            "FadeGesture": {
                "arg_names": [
                    "nActivity"
                ],
                "args": [
                    "GameActivity_t"
                ],
                "description": "Fade and remove the given gesture activity.",
                "return": "void"
            },
            "FindAbilityByName": {
                "arg_names": [
                    "ability_name"
                ],
                "args": [
                    "string"
                ],
                "description": "Retrieve an ability by name from the unit.",
                "return": "CDOTABaseAbility"
            },
            "FindAllModifiers": {
                "args": [],
                "description": "Returns a table of all of the modifiers on the NPC.",
                "return": "CDOTA_Buff[]"
            },
            "FindAllModifiersByName": {
                "arg_names": [
                    "name"
                ],
                "args": [
                    "string"
                ],
                "description": "Returns a table of all of the modifiers on the NPC with the passed name (modifierName)",
                "return": "CDOTA_Buff[]"
            },
            "FindItemInInventory": {
                "arg_names": [
                    "item_name"
                ],
                "args": [
                    "string"
                ],
                "description": "Get handle to first item in inventory, else nil.",
                "return": "CDOTA_Item"
            },
            "FindModifierByName": {
                "arg_names": [
                    "modifier_name"
                ],
                "args": [
                    "string"
                ],
                "description": "Return a handle to the modifier of the given name if found, else nil (string Name )",
                "return": "CDOTA_Buff"
            },
            "FindModifierByNameAndCaster": {
                "arg_names": [
                    "modifier_name",
                    "caster"
                ],
                "args": [
                    "string",
                    "CDOTA_BaseNPC"
                ],
                "description": "Return a handle to the modifier of the given name from the passed caster if found, else nil ( string Name, hCaster )",
                "return": "CDOTA_Buff"
            },
            "ForcePlayActivityOnce": {
                "arg_names": [
                    "nActivity"
                ],
                "args": [
                    "GameActivity_t"
                ],
                "description": "Play an activity once, and then go back to idle.",
                "return": "void"
            },
            "GetAbilityByIndex": {
                "arg_names": [
                    "ability_index"
                ],
                "args": [
                    "number"
                ],
                "description": "Retrieve an ability by index from the unit.",
                "return": "CDOTABaseAbility"
            },
            "GetAggroTarget": {
                "args": [],
                "description": "Returns this unit's aggro target.",
                "return": "CDOTA_BaseNPC"
            },
            "GetAttackCapability": {
                "args": [],
                "return": "DOTAUnitAttackCapability_t"
            },
            "GetAttackTarget": {
                "args": [],
                "return": "CDOTA_BaseNPC"
            },
            "GetAverageTrueAttackDamage": {
                "arg_names": [
                    "hTarget"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "Returns the average value of the minimum and maximum damage values.",
                "return": "int"
            },
            "GetCloneSource": {
                "args": [],
                "description": "Get clone source (Meepo Prime, if this is a Meepo)",
                "return": "CDOTA_BaseNPC"
            },
            "GetCurrentActiveAbility": {
                "args": [],
                "description": "Get the ability this unit is currently casting.",
                "return": "CDOTABaseAbility"
            },
            "GetCursorCastTarget": {
                "args": [],
                "return": "CDOTA_BaseNPC"
            },
            "GetForceAttackTarget": {
                "args": [],
                "return": "CDOTA_BaseNPC"
            },
            "GetInitialGoalEntity": {
                "args": [],
                "description": "Returns the initial waypoint goal for this NPC.",
                "return": "CBaseEntity"
            },
            "GetItemInSlot": {
                "arg_names": [
                    "slot"
                ],
                "args": [
                    "int"
                ],
                "description": "Returns nth item in inventory slot (index is zero based).",
                "return": "CDOTA_Item"
            },
            "GetModifierStackCount": {
                "arg_names": [
                    "modifierName",
                    "hCaster"
                ],
                "args": [
                    "cstring",
                    "CDOTA_BaseNPC"
                ],
                "description": "Gets the stack count of a given modifier.",
                "return": "int"
            },
            "GetOpposingTeamNumber": {
                "args": [],
                "return": "DOTATeam_t"
            },
            "GetPlayerOwner": {
                "args": [],
                "description": "Returns the player that owns this unit.",
                "return": "CDOTAPlayer"
            },
            "GetPlayerOwnerID": {
                "args": [],
                "description": "Get the owner player ID for this unit.",
                "return": "PlayerID"
            },
            "GetRangeToUnit": {
                "arg_names": [
                    "hNPC"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "return": "float"
            },
            "Heal": {
                "arg_names": [
                    "flAmount",
                    "hInflictor"
                ],
                "args": [
                    "float",
                    "CDOTA_BaseNPC"
                ],
                "description": "Heal this unit.",
                "return": "void"
            },
            "IsAttackingEntity": {
                "arg_names": [
                    "hEntity"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "return": "bool"
            },
            "IsOpposingTeam": {
                "arg_names": [
                    "nTeam"
                ],
                "args": [
                    "DOTATeam_t"
                ],
                "return": "bool"
            },
            "Kill": {
                "arg_names": [
                    "hAbility",
                    "hAttacker"
                ],
                "args": [
                    "CDOTABaseAbility",
                    "CDOTA_BaseNPC"
                ],
                "description": "Kills this NPC, with the params Ability and Attacker.",
                "return": "void"
            },
            "MakeVisibleDueToAttack": {
                "arg_names": [
                    "iTeam",
                    "flRadius"
                ],
                "args": [
                    "DOTATeam_t",
                    "float"
                ],
                "return": "void"
            },
            "MakeVisibleToTeam": {
                "arg_names": [
                    "iTeam",
                    "flDuration"
                ],
                "args": [
                    "DOTATeam_t",
                    "float"
                ],
                "return": "void"
            },
            "ModifyHealth": {
                "arg_names": [
                    "iDesiredHealthValue",
                    "hAbility",
                    "bLethal",
                    "iAdditionalFlags"
                ],
                "args": [
                    "int",
                    "CDOTABaseAbility",
                    "bool",
                    "int"
                ],
                "description": "Sets the health to a specific value, with optional flags or inflictors.",
                "return": "void"
            },
            "MoveToNPC": {
                "arg_names": [
                    "hNPC"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "Move to follow a unit.",
                "return": "void"
            },
            "MoveToNPCToGiveItem": {
                "arg_names": [
                    "hNPC",
                    "hItem"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "CDOTA_Item"
                ],
                "description": "Give an item to another unit.",
                "return": "void"
            },
            "MoveToTargetToAttack": {
                "arg_names": [
                    "hTarget"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "Move to a target to attack.",
                "return": "void"
            },
            "PerformAttack": {
                "arg_names": [
                    "hTarget",
                    "bUseCastAttackOrb",
                    "bProcessProcs",
                    "bSkipCooldown",
                    "bIgnoreInvis",
                    "bUseProjectile",
                    "bFakeAttack",
                    "bNeverMiss"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "bool",
                    "bool",
                    "bool",
                    "bool",
                    "bool",
                    "bool",
                    "bool"
                ],
                "description": "Performs an attack on a target.",
                "return": "void"
            },
            "PickupDroppedItem": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "Pick up a dropped item.",
                "return": "void"
            },
            "PickupRune": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "Pick up a rune.",
                "return": "void"
            },
            "RemoveGesture": {
                "arg_names": [
                    "nActivity"
                ],
                "args": [
                    "GameActivity_t"
                ],
                "description": "Remove the given gesture activity.",
                "return": "void"
            },
            "RemoveHorizontalMotionController": {
                "arg_names": [
                    "hBuff"
                ],
                "args": [
                    "CDOTA_Buff"
                ],
                "return": "void"
            },
            "RemoveItem": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "Removes the passed item from this unit's inventory and deletes it.",
                "return": "void"
            },
            "RemoveModifierByNameAndCaster": {
                "arg_names": [
                    "pszScriptName",
                    "hCaster"
                ],
                "args": [
                    "cstring",
                    "CDOTA_BaseNPC"
                ],
                "description": "Removes a modifier that was cast by the given caster.",
                "return": "void"
            },
            "RemoveVerticalMotionController": {
                "arg_names": [
                    "hBuff"
                ],
                "args": [
                    "CDOTA_Buff"
                ],
                "return": "void"
            },
            "SellItem": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "Sells the passed item in this unit's inventory.",
                "return": "void"
            },
            "SetAbilityByIndex": {
                "arg_names": [
                    "hAbility",
                    "iIndex"
                ],
                "args": [
                    "CDOTABaseAbility",
                    "int"
                ],
                "description": "Set the ability by index.",
                "return": "void"
            },
            "SetAggroTarget": {
                "arg_names": [
                    "hAggroTarget"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "Set this unit's aggro target to a specified unit.",
                "return": "void"
            },
            "SetAttackCapability": {
                "arg_names": [
                    "iAttackCapabilities"
                ],
                "args": [
                    "DOTAUnitAttackCapability_t"
                ],
                "return": "void"
            },
            "SetAttacking": {
                "arg_names": [
                    "hAttackTarget"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "return": "void"
            },
            "SetCursorCastTarget": {
                "arg_names": [
                    "hEntity"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "return": "void"
            },
            "SetForceAttackTarget": {
                "arg_names": [
                    "hNPC"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "return": "void"
            },
            "SetInitialGoalEntity": {
                "arg_names": [
                    "hGoal"
                ],
                "args": [
                    "CBaseEntity"
                ],
                "description": "Sets the initial waypoint goal for this NPC.",
                "return": "void"
            },
            "SetModifierStackCount": {
                "arg_names": [
                    "pszScriptName",
                    "hCaster",
                    "nStackCount"
                ],
                "args": [
                    "cstring",
                    "CDOTA_BaseNPC",
                    "int"
                ],
                "description": "Sets the stack count of a given modifier.",
                "return": "void"
            },
            "SetMoveCapability": {
                "arg_names": [
                    "iMoveCapabilities"
                ],
                "args": [
                    "DOTAUnitMoveCapability_t"
                ],
                "return": "void"
            },
            "SpendMana": {
                "arg_names": [
                    "flManaSpent",
                    "hAbility"
                ],
                "args": [
                    "float",
                    "CDOTABaseAbility"
                ],
                "description": "Spend mana from this unit, this can be used for spending mana from abilities or item usage.",
                "return": "void"
            },
            "StartGesture": {
                "arg_names": [
                    "nActivity"
                ],
                "args": [
                    "GameActivity_t"
                ],
                "description": "Add the given gesture activity.",
                "return": "void"
            },
            "StartGestureWithPlaybackRate": {
                "arg_names": [
                    "nActivity",
                    "flRate"
                ],
                "args": [
                    "GameActivity_t",
                    "float"
                ],
                "description": "Add the given gesture activity with a playback rate override.",
                "return": "void"
            },
            "TakeItem": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "Removed the passed item from this unit's inventory.",
                "return": "handle"
            },
            "TriggerSpellAbsorb": {
                "arg_names": [
                    "hAbility"
                ],
                "args": [
                    "CDOTABaseAbility"
                ],
                "return": "bool"
            },
            "TriggerSpellReflect": {
                "arg_names": [
                    "hAbility"
                ],
                "args": [
                    "CDOTABaseAbility"
                ],
                "description": "Trigger the Lotus Orb-like effect.(hAbility)",
                "return": "void"
            }
        }
    },
    "CDOTA_BaseNPC_Creature": {
        "functions": {
            "AddItemDrop": {
                "arg_names": [
                    "hDropData"
                ],
                "args": [
                    "table"
                ],
                "description": "Add the specified item drop to this creature.",
                "return": "void"
            }
        }
    },
    "CDOTA_BaseNPC_Hero": {
        "functions": {
            "AddExperience": {
                "arg_names": [
                    "flXP",
                    "nReason",
                    "bApplyBotDifficultyScaling",
                    "bIncrementTotal"
                ],
                "args": [
                    "float",
                    "EDOTA_ModifyXP_Reason",
                    "bool",
                    "bool"
                ],
                "description": "Params: Float XP, Bool applyBotDifficultyScaling",
                "return": "bool"
            },
            "GetAdditionalOwnedUnits": {
                "args": [],
                "return": "CDOTA_BaseNPC[]"
            },
            "GetPlayerID": {
                "args": [],
                "description": "Returns player ID of the player owning this hero",
                "return": "PlayerID"
            },
            "GetPrimaryAttribute": {
                "args": [],
                "description": "0 = strength, 1 = agility, 2 = intelligence.",
                "return": "Attributes"
            },
            "GetTogglableWearable": {
                "arg_names": [
                    "nSlotType"
                ],
                "args": [
                    "int"
                ],
                "description": "Get wearable entity in slot (slot)",
                "return": "CBaseEntity"
            },
            "KilledHero": {
                "arg_names": [
                    "hHero",
                    "hInflictor"
                ],
                "args": [
                    "CDOTA_BaseNPC_Hero",
                    "CDOTA_BaseNPC"
                ],
                "description": "Args: Hero, Inflictor",
                "return": "void"
            },
            "SetPrimaryAttribute": {
                "arg_names": [
                    "nPrimaryAttribute"
                ],
                "args": [
                    "Attributes"
                ],
                "description": "Set this hero's primary attribute value.",
                "return": "void"
            },
            "SpendGold": {
                "arg_names": [
                    "iCost",
                    "iReason"
                ],
                "args": [
                    "int",
                    "EDOTA_ModifyGold_Reason"
                ],
                "description": "Args: int nGold, int nReason",
                "return": "void"
            },
            "UpgradeAbility": {
                "arg_names": [
                    "hAbility"
                ],
                "args": [
                    "CDOTABaseAbility"
                ],
                "description": "This upgrades the passed ability if it exists and the hero has enough ability points.",
                "return": "void"
            }
        }
    },
    "CDOTA_Buff": {
        "functions": {
            "GetAbility": {
                "args": [],
                "description": "Get the ability that generated the modifier.",
                "return": "CDOTABaseAbility"
            },
            "GetCaster": {
                "args": [],
                "description": "Get the owner of the ability responsible for the modifier.",
                "return": "CDOTA_BaseNPC"
            },
            "GetParent": {
                "args": [],
                "description": "Get the unit the modifier is parented to.",
                "return": "CDOTA_BaseNPC"
            }
        }
    },
    "CDOTA_Item": {
        "functions": {
            "GetContainer": {
                "args": [],
                "description": "Get the container for this item.",
                "return": "CDOTA_Item_Physical"
            },
            "GetPurchaser": {
                "args": [],
                "description": "Get the purchaser for this item.",
                "return": "CDOTA_BaseNPC"
            },
            "GetShareability": {
                "args": [],
                "return": "EShareAbility"
            },
            "SetPurchaser": {
                "arg_names": [
                    "hPurchaser"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "Set the purchaser of record for this item.",
                "return": "void"
            },
            "SetShareability": {
                "arg_names": [
                    "iShareability"
                ],
                "args": [
                    "EShareAbility"
                ],
                "return": "void"
            }
        }
    },
    "CDOTA_Item_Lua": {
        "functions": {
            "CastFilterResult": {
                "args": [],
                "description": "Determine whether an issued command with no target is valid.",
                "return": "UnitFilterResult"
            },
            "CastFilterResultLocation": {
                "arg_names": [
                    "vLocation"
                ],
                "args": [
                    "vector"
                ],
                "description": "(Vector vLocation) Determine whether an issued command on a location is valid.",
                "return": "UnitFilterResult"
            },
            "CastFilterResultTarget": {
                "arg_names": [
                    "hTarget"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "(HSCRIPT hTarget) Determine whether an issued command on a target is valid.",
                "return": "UnitFilterResult"
            },
            "GetBehavior": {
                "args": [],
                "description": "Return cast behavior type of this ability.",
                "return": "DOTA_ABILITY_BEHAVIOR"
            },
            "GetCastRange": {
                "arg_names": [
                    "vLocation",
                    "hTarget"
                ],
                "args": [
                    "vector",
                    "CDOTA_BaseNPC"
                ],
                "description": "Return cast range of this ability.",
                "return": "int"
            },
            "GetCustomCastErrorTarget": {
                "arg_names": [
                    "hTarget"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "(HSCRIPT hTarget) Return the error string of a failed command on a target.",
                "return": "cstring"
            },
            "OnHeroDiedNearby": {
                "arg_names": [
                    "unit",
                    "attacker",
                    "event"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "CDOTA_BaseNPC",
                    "table"
                ],
                "description": "A hero has died in the vicinity (ie Urn), takes table of params.",
                "return": "void"
            },
            "OnItemEquipped": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "( HSCRIPT hItem ) Caster equipped item.",
                "return": "void"
            },
            "OnProjectileHit": {
                "arg_names": [
                    "hTarget",
                    "vLocation"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "vector"
                ],
                "description": "(HSCRIPT hTarget, Vector vLocation) Projectile has collided with a given target or reached its destination (target is invalid).",
                "return": "bool"
            },
            "OnStolen": {
                "arg_names": [
                    "hSourceAbility"
                ],
                "args": [
                    "CDOTABaseAbility"
                ],
                "description": "( HSCRIPT hAbility ) Special behavior when stolen by Spell Steal.",
                "return": "void"
            }
        }
    },
    "CDOTA_Item_Physical": {
        "functions": {
            "GetContainedItem": {
                "args": [],
                "description": "Returned the contained item.",
                "return": "CDOTA_Item"
            },
            "SetContainedItem": {
                "arg_names": [
                    "hItem"
                ],
                "args": [
                    "CDOTA_Item"
                ],
                "description": "Set the contained item.",
                "return": "void"
            }
        }
    },
    "CDOTA_MapTree": {
        "functions": {
            "CutDown": {
                "arg_names": [
                    "nTreeNumberKnownTo"
                ],
                "args": [
                    "DOTATeam_t"
                ],
                "description": "Cuts down this tree. Parameters: int nTeamNumberKnownTo (-1 = invalid team)",
                "return": "void"
            },
            "CutDownRegrowAfter": {
                "arg_names": [
                    "flRegrowAfter",
                    "nTeamNumberKnownTo"
                ],
                "args": [
                    "float",
                    "DOTATeam_t"
                ],
                "description": "Cuts down this tree. Parameters: float flRegrowAfter (-1 = never regrow), int nTeamNumberKnownTo (-1 = invalid team)",
                "return": "void"
            }
        }
    },
    "CDOTA_Modifier_Lua": {
        "functions": {
            "GetAttributes": {
                "args": [],
                "description": "Return the types of attributes applied to this modifier (enum value from DOTAModifierAttribute_t",
                "return": "DOTAModifierAttribute_t"
            },
            "GetAuraEntityReject": {
                "arg_names": [
                    "hEntity"
                ],
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "Return true/false if this entity should receive the aura under specific conditions",
                "return": "bool"
            },
            "GetAuraSearchFlags": {
                "args": [],
                "description": "Return the unit flags this aura respects when placing buffs.",
                "return": "DOTA_UNIT_TARGET_FLAGS"
            },
            "GetAuraSearchTeam": {
                "args": [],
                "description": "Return the teams this aura applies its buff to.",
                "return": "DOTA_UNIT_TARGET_TEAM"
            },
            "GetAuraSearchType": {
                "args": [],
                "description": "Return the unit classifications this aura applies its buff to.",
                "return": "DOTA_UNIT_TARGET_TYPE"
            },
            "GetEffectAttachType": {
                "args": [],
                "description": "Return the attach type of the particle system from GetEffectName.",
                "return": "ParticleAttachment_t"
            },
            "GetPriority": {
                "args": [],
                "description": "Return the priority order this modifier will be applied over others.",
                "return": "modifierpriority"
            },
            "HeroEffectPriority": {
                "args": [],
                "description": "Relationship of this hero effect with those from other buffs (higher is more likely to be shown).",
                "return": "modifierpriority"
            },
            "OnCreated": {
                "arg_names": [
                    "params"
                ],
                "args": [
                    "table"
                ],
                "description": "Runs when the modifier is created.",
                "return": "void"
            },
            "OnRefresh": {
                "arg_names": [
                    "params"
                ],
                "args": [
                    "table"
                ],
                "description": "Runs when the modifier is refreshed.",
                "return": "void"
            },
            "StatusEffectPriority": {
                "args": [],
                "description": "Relationship of this status effect with those from other buffs (higher is more likely to be shown).",
                "return": "modifierpriority"
            }
        }
    },
    "CDOTA_Modifier_Lua_Horizontal_Motion": {
        "functions": {
            "GetPriority": {
                "args": [],
                "description": "Get the priority",
                "return": "modifierpriority"
            },
            "SetPriority": {
                "arg_names": [
                    "nMotionPriority"
                ],
                "args": [
                    "modifierpriority"
                ],
                "description": "Set the priority",
                "return": "void"
            },
            "UpdateHorizontalMotion": {
                "arg_names": [
                    "me",
                    "dt"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "float"
                ],
                "description": "Perform any motion from the given interval on the NPC.",
                "return": "void"
            }
        }
    },
    "CDOTA_Modifier_Lua_Motion_Both": {
        "functions": {
            "GetPriority": {
                "args": [],
                "description": "Get the priority",
                "return": "modifierpriority"
            },
            "SetPriority": {
                "arg_names": [
                    "nMotionPriority"
                ],
                "args": [
                    "modifierpriority"
                ],
                "description": "Set the priority",
                "return": "void"
            },
            "UpdateHorizontalMotion": {
                "arg_names": [
                    "me",
                    "dt"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "float"
                ],
                "description": "Perform any motion from the given interval on the NPC.",
                "return": "void"
            },
            "UpdateVerticalMotion": {
                "arg_names": [
                    "me",
                    "dt"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "float"
                ],
                "description": "Perform any motion from the given interval on the NPC.",
                "return": "void"
            }
        }
    },
    "CDOTA_Modifier_Lua_Vertical_Motion": {
        "functions": {
            "GetMotionPriority": {
                "args": [],
                "description": "Get the priority",
                "return": "modifierpriority"
            },
            "SetMotionPriority": {
                "arg_names": [
                    "nMotionPriority"
                ],
                "args": [
                    "modifierpriority"
                ],
                "description": "Set the priority",
                "return": "void"
            },
            "UpdateVerticalMotion": {
                "arg_names": [
                    "me",
                    "dt"
                ],
                "args": [
                    "CDOTA_BaseNPC",
                    "float"
                ],
                "description": "Perform any motion from the given interval on the NPC.",
                "return": "void"
            }
        }
    },
    "CDOTA_PlayerResource": {
        "functions": {
            "AddAegisPickup": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "void"
            },
            "AddClaimedFarm": {
                "arg_names": [
                    "iPlayerID",
                    "flFarmValue",
                    "bEarnedValue"
                ],
                "args": [
                    "PlayerID",
                    "float",
                    "bool"
                ],
                "return": "void"
            },
            "AddGoldSpentOnSupport": {
                "arg_names": [
                    "iPlayerID",
                    "iCost"
                ],
                "args": [
                    "PlayerID",
                    "int"
                ],
                "return": "void"
            },
            "AddRunePickup": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "void"
            },
            "AreUnitsSharedWithPlayerID": {
                "arg_names": [
                    "nUnitOwnerPlayerID",
                    "nOtherPlayerID"
                ],
                "args": [
                    "PlayerID",
                    "PlayerID"
                ],
                "return": "bool"
            },
            "CanRepick": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "bool"
            },
            "ClearKillsMatrix": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "void"
            },
            "ClearLastHitMultikill": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "void"
            },
            "ClearLastHitStreak": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "void"
            },
            "ClearRawPlayerDamageMatrix": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "void"
            },
            "ClearStreak": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "void"
            },
            "GetAegisPickups": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetAssists": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetBroadcasterChannel": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "uint"
            },
            "GetBroadcasterChannelSlot": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "uint"
            },
            "GetClaimedDenies": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetClaimedFarm": {
                "arg_names": [
                    "iPlayerID",
                    "bOnlyEarned"
                ],
                "args": [
                    "PlayerID",
                    "bool"
                ],
                "return": "float"
            },
            "GetClaimedMisses": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetConnectionState": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "DOTAConnectionState_t"
            },
            "GetCreepDamageTaken": {
                "arg_names": [
                    "iPlayerID",
                    "bTotal"
                ],
                "args": [
                    "PlayerID",
                    "bool"
                ],
                "return": "int"
            },
            "GetCustomBuybackCooldown": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "float"
            },
            "GetCustomBuybackCost": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetCustomTeamAssignment": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "description": "Get the current custom team assignment for this player.",
                "return": "int"
            },
            "GetDamageDoneToHero": {
                "arg_names": [
                    "iPlayerID",
                    "iVictimID"
                ],
                "args": [
                    "PlayerID",
                    "int"
                ],
                "return": "int"
            },
            "GetDeaths": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetDenies": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetEventPointsForPlayerID": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "uint"
            },
            "GetEventPremiumPoints": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "uint"
            },
            "GetEventRanks": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "<unknown>"
            },
            "GetGold": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetGoldLostToDeath": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetGoldPerMin": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "float"
            },
            "GetGoldSpentOnBuybacks": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetGoldSpentOnConsumables": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetGoldSpentOnItems": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetGoldSpentOnSupport": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetHealing": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "float"
            },
            "GetHeroDamageTaken": {
                "arg_names": [
                    "iPlayerID",
                    "bTotal"
                ],
                "args": [
                    "PlayerID",
                    "bool"
                ],
                "return": "int"
            },
            "GetKills": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetKillsDoneToHero": {
                "arg_names": [
                    "iPlayerID",
                    "iVictimID"
                ],
                "args": [
                    "PlayerID",
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetLastHitMultikill": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetLastHitStreak": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetLastHits": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetLevel": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetMisses": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetNearbyCreepDeaths": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetNthCourierForTeam": {
                "arg_names": [
                    "nCourierIndex",
                    "nTeamNumber"
                ],
                "args": [
                    "int",
                    "DOTATeam_t"
                ],
                "return": "handle"
            },
            "GetNthPlayerIDOnTeam": {
                "arg_names": [
                    "iTeamNumber",
                    "iNthPlayer"
                ],
                "args": [
                    "DOTATeam_t",
                    "int"
                ],
                "return": "int"
            },
            "GetNumConsumablesPurchased": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetNumCouriersForTeam": {
                "arg_names": [
                    "nTeamNumber"
                ],
                "args": [
                    "DOTATeam_t"
                ],
                "return": "int"
            },
            "GetNumItemsPurchased": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetPlayer": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "CDOTAPlayer"
            },
            "GetPlayerCountForTeam": {
                "arg_names": [
                    "iTeam"
                ],
                "args": [
                    "DOTATeam_t"
                ],
                "return": "int"
            },
            "GetPlayerLoadedCompletely": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "bool"
            },
            "GetPlayerName": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "cstring"
            },
            "GetRawPlayerDamage": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetReliableGold": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetRespawnSeconds": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetRoshanKills": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetRunePickups": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetSelectedHeroEntity": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "CDOTA_BaseNPC_Hero"
            },
            "GetSelectedHeroID": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetSelectedHeroName": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "cstring"
            },
            "GetSteamAccountID": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "uint"
            },
            "GetSteamID": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "description": "Get the 64 bit steam ID for a given player.",
                "return": "uint64"
            },
            "GetStreak": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetStuns": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "float"
            },
            "GetTeam": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "DOTATeam_t"
            },
            "GetTeamKills": {
                "arg_names": [
                    "iTeam"
                ],
                "args": [
                    "DOTATeam_t"
                ],
                "return": "int"
            },
            "GetTimeOfLastConsumablePurchase": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "float"
            },
            "GetTimeOfLastDeath": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "float"
            },
            "GetTimeOfLastItemPurchase": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "float"
            },
            "GetTotalEarnedGold": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetTotalEarnedXP": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetTotalGoldSpent": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetTowerDamageTaken": {
                "arg_names": [
                    "iPlayerID",
                    "bTotal"
                ],
                "args": [
                    "PlayerID",
                    "bool"
                ],
                "return": "int"
            },
            "GetTowerKills": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetUnitShareMaskForPlayer": {
                "arg_names": [
                    "nPlayerID",
                    "nOtherPlayerID"
                ],
                "args": [
                    "PlayerID",
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetUnreliableGold": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "int"
            },
            "GetXPPerMin": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "float"
            },
            "HasCustomGameTicketForPlayerID": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "description": "Does this player have a custom game ticket for this game?",
                "return": "bool"
            },
            "HasRandomed": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "bool"
            },
            "HasSelectedHero": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "bool"
            },
            "IncrementAssists": {
                "arg_names": [
                    "iPlayerID",
                    "iVictimID"
                ],
                "args": [
                    "PlayerID",
                    "PlayerID"
                ],
                "return": "void"
            },
            "IncrementClaimedDenies": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "void"
            },
            "IncrementClaimedMisses": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "void"
            },
            "IncrementDeaths": {
                "arg_names": [
                    "iPlayerID",
                    "iKillerID"
                ],
                "args": [
                    "PlayerID",
                    "PlayerID"
                ],
                "return": "void"
            },
            "IncrementDenies": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "void"
            },
            "IncrementKills": {
                "arg_names": [
                    "iPlayerID",
                    "iVictimID"
                ],
                "args": [
                    "PlayerID",
                    "PlayerID"
                ],
                "return": "void"
            },
            "IncrementLastHitMultikill": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "void"
            },
            "IncrementLastHitStreak": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "void"
            },
            "IncrementLastHits": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "void"
            },
            "IncrementMisses": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "void"
            },
            "IncrementNearbyCreepDeaths": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "void"
            },
            "IncrementStreak": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "void"
            },
            "IncrementTotalEarnedXP": {
                "arg_names": [
                    "iPlayerID",
                    "iXP",
                    "nReason"
                ],
                "args": [
                    "PlayerID",
                    "int",
                    "EDOTA_ModifyXP_Reason"
                ],
                "return": "void"
            },
            "IsBroadcaster": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "bool"
            },
            "IsDisableHelpSetForPlayerID": {
                "arg_names": [
                    "nPlayerID",
                    "nOtherPlayerID"
                ],
                "args": [
                    "PlayerID",
                    "PlayerID"
                ],
                "return": "bool"
            },
            "IsFakeClient": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "bool"
            },
            "IsHeroSharedWithPlayerID": {
                "arg_names": [
                    "nUnitOwnerPlayerID",
                    "nOtherPlayerID"
                ],
                "args": [
                    "PlayerID",
                    "PlayerID"
                ],
                "return": "bool"
            },
            "IsValidPlayer": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "bool"
            },
            "IsValidPlayerID": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "bool"
            },
            "IsValidTeamPlayer": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "bool"
            },
            "IsValidTeamPlayerID": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "bool"
            },
            "ModifyGold": {
                "arg_names": [
                    "iPlayerID",
                    "iGoldChange",
                    "bReliable",
                    "nReason"
                ],
                "args": [
                    "PlayerID",
                    "int",
                    "bool",
                    "EDOTA_ModifyGold_Reason"
                ],
                "return": "int"
            },
            "ReplaceHeroWith": {
                "arg_names": [
                    "iPlayerID",
                    "pszHeroClass",
                    "nGold",
                    "nXP"
                ],
                "args": [
                    "PlayerID",
                    "cstring",
                    "int",
                    "int"
                ],
                "description": "(playerID, heroClassName, gold, XP) - replaces the player's hero with a new one of the specified class, gold and XP",
                "return": "handle"
            },
            "ResetBuybackCostTime": {
                "arg_names": [
                    "nPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "void"
            },
            "ResetTotalEarnedGold": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "void"
            },
            "SetBuybackCooldownTime": {
                "arg_names": [
                    "nPlayerID",
                    "flBuybackCooldown"
                ],
                "args": [
                    "PlayerID",
                    "float"
                ],
                "return": "void"
            },
            "SetBuybackGoldLimitTime": {
                "arg_names": [
                    "nPlayerID",
                    "flBuybackCooldown"
                ],
                "args": [
                    "PlayerID",
                    "float"
                ],
                "return": "void"
            },
            "SetCameraTarget": {
                "arg_names": [
                    "nPlayerID",
                    "hTarget"
                ],
                "args": [
                    "PlayerID",
                    "CDOTA_BaseNPC"
                ],
                "description": "(playerID, entity) - force the given player's camera to follow the given entity",
                "return": "void"
            },
            "SetCanRepick": {
                "arg_names": [
                    "iPlayerID",
                    "bCanRepick"
                ],
                "args": [
                    "PlayerID",
                    "bool"
                ],
                "return": "void"
            },
            "SetCustomBuybackCooldown": {
                "arg_names": [
                    "iPlayerID",
                    "flCooldownTime"
                ],
                "args": [
                    "PlayerID",
                    "float"
                ],
                "description": "Set the buyback cooldown for this player.",
                "return": "void"
            },
            "SetCustomBuybackCost": {
                "arg_names": [
                    "iPlayerID",
                    "iGoldCost"
                ],
                "args": [
                    "PlayerID",
                    "int"
                ],
                "description": "Set the buyback cost for this player.",
                "return": "void"
            },
            "SetCustomPlayerColor": {
                "arg_names": [
                    "iPlayerID",
                    "r",
                    "g",
                    "b"
                ],
                "args": [
                    "PlayerID",
                    "int",
                    "int",
                    "int"
                ],
                "description": "Set custom color for player (minimap, scoreboard, etc)",
                "return": "void"
            },
            "SetCustomTeamAssignment": {
                "arg_names": [
                    "iPlayerID",
                    "iTeamAssignment"
                ],
                "args": [
                    "PlayerID",
                    "DOTATeam_t"
                ],
                "description": "Set custom team assignment for this player.",
                "return": "void"
            },
            "SetGold": {
                "arg_names": [
                    "iPlayerID",
                    "iGold",
                    "bReliable"
                ],
                "args": [
                    "PlayerID",
                    "int",
                    "bool"
                ],
                "return": "void"
            },
            "SetHasRandomed": {
                "arg_names": [
                    "iPlayerID"
                ],
                "args": [
                    "PlayerID"
                ],
                "return": "void"
            },
            "SetLastBuybackTime": {
                "arg_names": [
                    "iPlayerID",
                    "iLastBuybackTime"
                ],
                "args": [
                    "PlayerID",
                    "int"
                ],
                "return": "void"
            },
            "SetOverrideSelectionEntity": {
                "arg_names": [
                    "nPlayerID",
                    "hEntity"
                ],
                "args": [
                    "PlayerID",
                    "CDOTA_BaseNPC"
                ],
                "description": "Set the forced selection entity for a player.",
                "return": "void"
            },
            "SetUnitShareMaskForPlayer": {
                "arg_names": [
                    "nPlayerID",
                    "nOtherPlayerID",
                    "nFlag",
                    "bState"
                ],
                "args": [
                    "PlayerID",
                    "PlayerID",
                    "int",
                    "bool"
                ],
                "return": "void"
            },
            "SpendGold": {
                "arg_names": [
                    "iPlayerID",
                    "iCost",
                    "iReason"
                ],
                "args": [
                    "PlayerID",
                    "int",
                    "EDOTA_ModifyGold_Reason"
                ],
                "return": "void"
            },
            "UpdateTeamSlot": {
                "arg_names": [
                    "iPlayerID",
                    "iTeamNumber",
                    "desiredSlot"
                ],
                "args": [
                    "PlayerID",
                    "DOTATeam_t",
                    "int"
                ],
                "return": "void"
            }
        }
    },
    "CEntities": {
        "functions": {
            "CreateByClassname": {
                "args": [
                    "cstring"
                ],
                "description": "Creates an entity by classname",
                "return": "CBaseEntity",
                "arg_names": [
                    "className"
                ]
            },
            "FindAllByClassname": {
                "args": [
                    "cstring"
                ],
                "description": "Finds all entities by class name. Returns an array containing all the found entities.",
                "return": "CBaseEntity[]",
                "arg_names": [
                    "className"
                ]
            },
            "FindAllByClassnameWithin": {
                "args": [
                    "cstring",
                    "vector",
                    "float"
                ],
                "description": "Find entities by class name within a radius.",
                "return": "CBaseEntity[]",
                "arg_names": [
                    "className",
                    "location",
                    "radius"
                ]
            },
            "FindAllByModel": {
                "args": [
                    "cstring"
                ],
                "description": "Find entities by model name.",
                "return": "CBaseEntity[]",
                "arg_names": [
                    "modelName"
                ]
            },
            "FindAllByName": {
                "args": [
                    "cstring"
                ],
                "description": "Find all entities by name. Returns an array containing all the found entities in it.",
                "return": "CBaseEntity[]",
                "arg_names": [
                    "name"
                ]
            },
            "FindAllByNameWithin": {
                "args": [
                    "cstring",
                    "vector",
                    "float"
                ],
                "description": "Find entities by name within a radius.",
                "return": "CBaseEntity[]",
                "arg_names": [
                    "name",
                    "location",
                    "radius"
                ]
            },
            "FindAllByTarget": {
                "args": [
                    "cstring"
                ],
                "description": "Find entities by targetname.",
                "return": "CBaseEntity[]",
                "arg_names": [
                    "target"
                ]
            },
            "FindAllInSphere": {
                "args": [
                    "vector",
                    "float"
                ],
                "description": "Find entities within a radius.",
                "return": "CBaseEntity[]",
                "arg_names": [
                    "location",
                    "radius"
                ]
            },
            "FindByClassname": {
                "args": [
                    "CBaseEntity | nil",
                    "cstring"
                ],
                "description": "Find entities by class name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
                "return": "CBaseEntity",
                "arg_names": [
                    "previous",
                    "className"
                ]
            },
            "FindByClassnameNearest": {
                "args": [
                    "cstring",
                    "vector",
                    "float"
                ],
                "description": "Find entities by class name nearest to a point.",
                "return": "CBaseEntity",
                "arg_names": [
                    "className",
                    "location",
                    "radius"
                ]
            },
            "FindByClassnameWithin": {
                "args": [
                    "CBaseEntity | nil",
                    "cstring",
                    "vector",
                    "float"
                ],
                "description": "Find entities by class name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
                "return": "CBaseEntity",
                "arg_names": [
                    "previous",
                    "className",
                    "location",
                    "radius"
                ]
            },
            "FindByModel": {
                "args": [
                    "CBaseEntity | nil",
                    "cstring"
                ],
                "description": "Find entities by model name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
                "return": "CBaseEntity",
                "arg_names": [
                    "previous",
                    "modelName"
                ]
            },
            "FindByModelWithin": {
                "args": [
                    "CBaseEntity | nil",
                    "cstring",
                    "vector",
                    "float"
                ],
                "description": "Find entities by model name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
                "return": "CBaseEntity",
                "arg_names": [
                    "previous",
                    "modelName",
                    "location",
                    "radius"
                ]
            },
            "FindByName": {
                "args": [
                    "CBaseEntity | nil",
                    "cstring"
                ],
                "description": "Find entities by name. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
                "return": "CBaseEntity",
                "arg_names": [
                    "previous",
                    "name"
                ]
            },
            "FindByNameNearest": {
                "args": [
                    "cstring",
                    "vector",
                    "float"
                ],
                "description": "Find entities by name nearest to a point.",
                "return": "CBaseEntity",
                "arg_names": [
                    "name",
                    "location",
                    "radius"
                ]
            },
            "FindByNameWithin": {
                "args": [
                    "CBaseEntity | nil",
                    "cstring",
                    "vector",
                    "float"
                ],
                "description": "Find entities by name within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
                "return": "CBaseEntity",
                "arg_names": [
                    "previous",
                    "name",
                    "location",
                    "radius"
                ]
            },
            "FindByTarget": {
                "args": [
                    "CBaseEntity | nil",
                    "cstring"
                ],
                "description": "Find entities by targetname. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
                "return": "CBaseEntity",
                "arg_names": [
                    "previous",
                    "target"
                ]
            },
            "FindInSphere": {
                "args": [
                    "CBaseEntity | nil",
                    "vector",
                    "float"
                ],
                "description": "Find entities within a radius. Pass 'null' to start an iteration, or reference to a previously found entity to continue a search",
                "return": "CBaseEntity",
                "arg_names": [
                    "previous",
                    "location",
                    "radius"
                ]
            },
            "First": {
                "args": [],
                "description": "Begin an iteration over the list of entities",
                "return": "CBaseEntity"
            },
            "GetLocalPlayer": {
                "args": [],
                "description": "Get the local player.",
                "return": "CDOTAPlayer"
            },
            "Next": {
                "args": [
                    "CBaseEntity"
                ],
                "description": "Continue an iteration over the list of entities, providing reference to a previously found entity",
                "return": "CBaseEntity",
                "arg_names": [
                    "previous"
                ]
            }
        }
    },
    "CScriptHeroList": {
        "functions": {
            "GetAllHeroes": {
                "args": [],
                "description": "Returns all the heroes in the world",
                "return": "CDOTA_BaseNPC_Hero[]"
            },
            "GetHero": {
                "args": [
                    "int"
                ],
                "description": "Get the Nth hero in the Hero List",
                "return": "CDOTA_BaseNPC_Hero",
                "arg_names": [
                    "nth"
                ]
            }
        }
    },
    "CScriptParticleManager": {
        "functions": {
            "CreateParticle": {
                "args": [
                    "cstring",
                    "ParticleAttachment_t",
                    "CDOTA_BaseNPC?"
                ],
                "description": "Creates a new particle effect",
                "return": "ParticleID",
                "arg_names": [
                    "particleName",
                    "particleAttach",
                    "owner"
                ]
            },
            "CreateParticleForPlayer": {
                "args": [
                    "cstring",
                    "ParticleAttachment_t",
                    "CDOTA_BaseNPC?",
                    "CDOTAPlayer"
                ],
                "description": "Creates a new particle effect that only plays for the specified player",
                "return": "ParticleID",
                "arg_names": [
                    "particleName",
                    "particleAttach",
                    "owner",
                    "player"
                ]
            },
            "CreateParticleForTeam": {
                "args": [
                    "cstring",
                    "ParticleAttachment_t",
                    "CDOTA_BaseNPC?",
                    "DOTATeam_t"
                ],
                "description": "Creates a new particle effect that only plays for the specified team",
                "return": "ParticleID",
                "arg_names": [
                    "particleName",
                    "particleAttach",
                    "owner",
                    "team"
                ]
            },
            "DestroyParticle": {
                "args": [
                    "ParticleID",
                    "bool"
                ],
                "description": "(int index, bool bDestroyImmediately) - Destroy a particle, if bDestroyImmediately destroy it without playing end caps.",
                "return": "void",
                "arg_names": [
                    "particle",
                    "immediate"
                ]
            },
            "ReleaseParticleIndex": {
                "args": [
                    "ParticleID"
                ],
                "description": "Frees the specified particle index",
                "return": "void",
                "arg_names": [
                    "particle"
                ]
            },
            "SetParticleAlwaysSimulate": {
                "args": [
                    "ParticleID"
                ],
                "return": "void",
                "arg_names": [
                    "particle"
                ]
            },
            "SetParticleControl": {
                "args": [
                    "ParticleID",
                    "int",
                    "vector"
                ],
                "description": "Set the control point data for a control on a particle effect",
                "return": "void",
                "arg_names": [
                    "particle",
                    "controlPoint",
                    "value"
                ]
            },
            "SetParticleControlEnt": {
                "args": [
                    "ParticleID",
                    "int",
                    "CDOTA_BaseNPC",
                    "ParticleAttachment_t",
                    "cstring",
                    "vector",
                    "bool"
                ],
                "return": "void",
                "arg_names": [
                    "particle",
                    "controlPoint",
                    "unit",
                    "particleAttach",
                    "attachment",
                    "offset",
                    "lockOrientation"
                ]
            },
            "SetParticleControlForward": {
                "args": [
                    "ParticleID",
                    "int",
                    "vector"
                ],
                "description": "(int nFXIndex, int nPoint, vForward)",
                "return": "void",
                "arg_names": [
                    "particle",
                    "controlPoint",
                    "forward"
                ]
            },
            "SetParticleControlOrientation": {
                "args": [
                    "ParticleID",
                    "int",
                    "vector",
                    "vector",
                    "vector"
                ],
                "description": "(int nFXIndex, int nPoint, vForward, vRight, vUp)",
                "return": "void",
                "arg_names": [
                    "particle",
                    "controlPoint",
                    "forward",
                    "right",
                    "up"
                ]
            }
        }
    },
    "Convars": {
        "functions": {
            "GetBool": {
                "args": [
                    "cstring"
                ],
                "description": "GetBool(name) : returns the convar as a boolean flag.",
                "return": "boolean",
                "arg_names": [
                    "convar"
                ]
            },
            "GetCommandClient": {
                "args": [],
                "description": "GetCommandClient() : returns the player who issued this console command.",
                "return": "CDOTAPlayer"
            },
            "GetDOTACommandClient": {
                "args": [],
                "description": "GetDOTACommandClient() : returns the DOTA player who issued this console command.",
                "return": "CDOTAPlayer"
            },
            "GetFloat": {
                "args": [
                    "cstring"
                ],
                "description": "GetFloat(name) : returns the convar as a float. May return null if no such convar.",
                "return": "number",
                "arg_names": [
                    "convar"
                ]
            },
            "GetInt": {
                "args": [
                    "cstring"
                ],
                "description": "GetInt(name) : returns the convar as an int. May return null if no such convar.",
                "return": "number",
                "arg_names": [
                    "convar"
                ]
            },
            "GetStr": {
                "args": [
                    "cstring"
                ],
                "description": "GetStr(name) : returns the convar as a string. May return null if no such convar.",
                "return": "string",
                "arg_names": [
                    "convar"
                ]
            },
            "RegisterCommand": {
                "args": [
                    "cstring",
                    "function",
                    "cstring",
                    "int"
                ],
                "description": "RegisterCommand(name, fn, helpString, flags) : register a console command.",
                "return": "void",
                "arg_names": [
                    "commandName",
                    "callback",
                    "description",
                    "flags"
                ]
            },
            "RegisterConvar": {
                "args": [
                    "cstring",
                    "cstring",
                    "cstring",
                    "int"
                ],
                "description": "RegisterConvar(name, defaultValue, helpString, flags): register a new console variable.",
                "return": "void",
                "arg_names": [
                    "convarName",
                    "defaultValue",
                    "description",
                    "flags"
                ]
            },
            "SetBool": {
                "args": [
                    "cstring",
                    "bool"
                ],
                "description": "SetBool(name, val) : sets the value of the convar to the bool.",
                "return": "void",
                "arg_names": [
                    "convar",
                    "value"
                ]
            },
            "SetFloat": {
                "args": [
                    "cstring",
                    "float"
                ],
                "description": "SetFloat(name, val) : sets the value of the convar to the float.",
                "return": "void",
                "arg_names": [
                    "convar",
                    "value"
                ]
            },
            "SetInt": {
                "args": [
                    "cstring",
                    "int"
                ],
                "description": "SetInt(name, val) : sets the value of the convar to the int.",
                "return": "void",
                "arg_names": [
                    "convar",
                    "value"
                ]
            },
            "SetStr": {
                "args": [
                    "cstring",
                    "cstring"
                ],
                "description": "SetStr(name, val) : sets the value of the convar to the string.",
                "return": "void",
                "arg_names": [
                    "convar",
                    "value"
                ]
            }
        }
    },
    "Global": {
        "functions": {
            "AddFOWViewer": {
                "args": [
                    "DOTATeam_t",
                    "vector",
                    "float",
                    "float",
                    "bool"
                ],
                "description": "Add temporary vision for a given team ( nTeamID, vLocation, flRadius, flDuration, bObstructedVision)",
                "return": "void",
                "arg_names": [
                    "team",
                    "location",
                    "radius",
                    "duration",
                    "obstructedVision"
                ]
            },
            "ClearTeamCustomHealthbarColor": {
                "args": [
                    "DOTATeam_t"
                ],
                "description": "( teamNumber )",
                "return": "void",
                "arg_names": [
                    "team"
                ]
            },
            "CreateHTTPRequest": {
                "args": [
                    "cstring",
                    "cstring"
                ],
                "description": "Create an HTTP request.",
                "return": "CScriptHTTPRequest"
            },
            "CreateHTTPRequestScriptVM": {
                "args": [
                    "cstring",
                    "cstring"
                ],
                "description": "Create an HTTP request.",
                "return": "CScriptHTTPRequest"
            },
            "CreateHeroForPlayer": {
                "args": [
                    "cstring",
                    "CDOTAPlayer"
                ],
                "description": "Creates a DOTA hero by its dota_npc_units.txt name and sets it as the given player's controlled hero",
                "return": "CDOTA_BaseNPC_Hero",
                "arg_names": [
                    "heroName",
                    "player"
                ]
            },
            "CreateItem": {
                "args": [
                    "cstring",
                    "CDOTAPlayer",
                    "CDOTAPlayer"
                ],
                "description": "Create a DOTA item",
                "return": "CDOTA_Item",
                "arg_names": [
                    "itemName",
                    "owner",
                    "purchaser"
                ]
            },
            "CreateItemOnPositionForLaunch": {
                "args": [
                    "vector",
                    "CDOTA_Item"
                ],
                "description": "Create a physical item at a given location, can start in air (but doesn't clear a space)",
                "return": "handle",
                "arg_names": [
                    "location",
                    "item"
                ]
            },
            "CreateItemOnPositionSync": {
                "args": [
                    "vector",
                    "CDOTA_Item"
                ],
                "description": "Create a physical item at a given location",
                "return": "handle",
                "arg_names": [
                    "location",
                    "item"
                ]
            },
            "CreateUnitByName": {
                "args": [
                    "string",
                    "vector",
                    "bool",
                    "CBaseEntity?",
                    "CDOTAPlayer?",
                    "DOTATeam_t"
                ],
                "description": "Creates a DOTA unit by its dota_npc_units.txt name",
                "return": "CDOTA_BaseNPC",
                "arg_names": [
                    "unit_name",
                    "location",
                    "find_clear_space",
                    "npc_owner",
                    "unit_owner",
                    "team_number"
                ]
            },
            "CreateUnitByNameAsync": {
                "args": [
                    "cstring",
                    "vector",
                    "bool",
                    "CDOTA_BaseNPC?",
                    "CDOTAPlayer?",
                    "DOTATeam_t",
                    "fun(unit: CDOTA_BaseNPC): nil"
                ],
                "description": "Creates a DOTA unit by its dota_npc_units.txt name",
                "return": "int",
                "arg_names": [
                    "unitName",
                    "location",
                    "findClearSpace",
                    "npcOwner",
                    "playerOwner",
                    "team",
                    "callback"
                ]
            },
            "DoCleaveAttack": {
                "args": [
                    "CDOTA_BaseNPC",
                    "CDOTA_BaseNPC",
                    "CDOTABaseAbility",
                    "float",
                    "float",
                    "float",
                    "float",
                    "cstring"
                ],
                "description": "(hAttacker, hTarget, hAbility, fDamage, fRadius, effectName)",
                "return": "int",
                "arg_names": [
                    "attacker",
                    "target",
                    "ability",
                    "damage",
                    "startRadius",
                    "endRadius",
                    "distance",
                    "effectName"
                ]
            },
            "DoUniqueString": {
                "args": [
                    "cstring"
                ],
                "description": "#UniqueString:Generate a string guaranteed to be unique across the life of the script VM, with an optional root string. Useful for adding data to tables when not sure what keys are already in use in that table.",
                "return": "cstring",
                "arg_names": [
                    "seed"
                ]
            },
            "EmitSoundOn": {
                "args": [
                    "cstring",
                    "CBaseEntity"
                ],
                "description": "Play named sound on Entity",
                "return": "void",
                "arg_names": [
                    "soundname",
                    "ntity"
                ]
            },
            "EntIndexToHScript": {
                "args": [
                    "int"
                ],
                "description": "Turn an entity index integer to an HScript representing that entity's script instance.",
                "return": "CBaseEntity",
                "arg_names": [
                    "entIndex"
                ]
            },
            "ExecuteOrderFromTable": {
                "args": [
                    "table"
                ],
                "description": "Issue an order from a script table",
                "return": "void",
                "arg_names": [
                    "order"
                ]
            },
            "FindClearSpaceForUnit": {
                "args": [
                    "CDOTA_BaseNPC",
                    "vector",
                    "bool"
                ],
                "description": "Place a unit somewhere not already occupied.",
                "return": "bool",
                "arg_names": [
                    "unit",
                    "location",
                    "unknown"
                ]
            },
            "FindUnitsInLine": {
                "args": [
                    "DOTATeam_t",
                    "vector",
                    "vector",
                    "CBaseEntity",
                    "float",
                    "DOTA_UNIT_TARGET_TEAM",
                    "DOTA_UNIT_TARGET_TYPE",
                    "DOTA_UNIT_TARGET_FLAGS"
                ],
                "description": "Find units that intersect the given line with the given flags.",
                "return": "CDOTA_BaseNPC[]",
                "arg_names": [
                    "team",
                    "startPos",
                    "endPos",
                    "cacheUnit",
                    "width",
                    "teamFilter",
                    "typeFilter",
                    "flagFilter"
                ]
            },
            "FindUnitsInRadius": {
                "args": [
                    "DOTATeam_t",
                    "vector",
                    "CBaseEntity",
                    "float",
                    "DOTA_UNIT_TARGET_TEAM",
                    "DOTA_UNIT_TARGET_TYPE",
                    "DOTA_UNIT_TARGET_FLAGS",
                    "int",
                    "bool"
                ],
                "description": "Finds the units in a given radius with the given flags.",
                "return": "CDOTA_BaseNPC[]",
                "arg_names": [
                    "team",
                    "location",
                    "cacheUnit",
                    "radius",
                    "teamFilter",
                    "typeFilter",
                    "flagFilter",
                    "order",
                    "canGrowCache"
                ]
            },
            "FireGameEvent": {
                "args": [
                    "cstring",
                    "table"
                ],
                "description": "Fire a game event.",
                "return": "void",
                "arg_names": [
                    "eventName",
                    "eventData"
                ]
            },
            "FireGameEventLocal": {
                "args": [
                    "cstring",
                    "table"
                ],
                "description": "Fire a game event without broadcasting to the client.",
                "return": "void",
                "arg_names": [
                    "eventName",
                    "eventData"
                ]
            },
            "GetEntityIndexForTreeId": {
                "args": [
                    "uint"
                ],
                "description": "Get the enity index for a tree id specified as the entindex_target of a DOTA_UNIT_ORDER_CAST_TARGET_TREE.",
                "return": "number"
            },
            "GetGroundHeight": {
                "args": [
                    "vector",
                    "CDOTA_BaseNPC"
                ],
                "return": "float",
                "arg_names": [
                    "location",
                    "unitHull"
                ]
            },
            "GetGroundPosition": {
                "args": [
                    "vector",
                    "CDOTA_BaseNPC"
                ],
                "description": "Returns the supplied position moved to the ground. Second parameter is an NPC for measuring movement collision hull offset.",
                "return": "vector",
                "arg_names": [
                    "location",
                    "unitHull"
                ]
            },
            "GetTeamHeroKills": {
                "args": [
                    "DOTATeam_t"
                ],
                "description": "( int teamID )",
                "return": "int",
                "arg_names": [
                    "team"
                ]
            },
            "GetTeamName": {
                "args": [
                    "DOTATeam_t"
                ],
                "description": "( int teamID )",
                "return": "cstring",
                "arg_names": [
                    "team"
                ]
            },
            "IsLocationVisible": {
                "args": [
                    "DOTATeam_t",
                    "vector"
                ],
                "description": "Ask fog of war if a location is visible to a certain team (nTeamNumber, vLocation).",
                "return": "bool",
                "arg_names": [
                    "team",
                    "location"
                ]
            },
            "IsValidEntity": {
                "args": [
                    "table"
                ],
                "description": "Checks to see if the given hScript is a valid entity",
                "return": "bool",
                "arg_names": [
                    "entity"
                ]
            },
            "LinkLuaModifier": {
                "args": [
                    "cstring",
                    "cstring",
                    "LuaModifierType"
                ],
                "description": "Link a lua-defined modifier with the associated class ( className, fileName, LuaModifierType).",
                "return": "void",
                "arg_names": [
                    "modifierName",
                    "filePath",
                    "motionController"
                ]
            },
            "ListenToGameEvent": {
                "args": [
                    "cstring",
                    "function",
                    "table"
                ],
                "description": "Register as a listener for a game event from script.",
                "return": "EventListenerID",
                "arg_names": [
                    "eventName",
                    "callback",
                    "context"
                ]
            },
            "LoadKeyValues": {
                "args": [
                    "cstring"
                ],
                "description": "Creates a table from the specified keyvalues text file",
                "return": "table",
                "arg_names": [
                    "filePath"
                ]
            },
            "LoadKeyValuesFromString": {
                "args": [
                    "cstring"
                ],
                "description": "Creates a table from the specified keyvalues string",
                "return": "table",
                "arg_names": [
                    "kvString"
                ]
            },
            "MinimapEvent": {
                "args": [
                    "DOTATeam_t",
                    "CBaseEntity",
                    "int",
                    "int",
                    "DOTAMinimapEvent_t",
                    "float"
                ],
                "description": "Start a minimap event. (nTeamID, hEntity, nXCoord, nYCoord, nEventType, nEventDuration).",
                "return": "void",
                "arg_names": [
                    "team",
                    "entity",
                    "xCoord",
                    "yCoord",
                    "eventType",
                    "duration"
                ]
            },
            "PauseGame": {
                "args": [
                    "bool"
                ],
                "description": "Pause or unpause the game.",
                "return": "void",
                "arg_names": [
                    "paused"
                ]
            },
            "PrecacheItemByNameAsync": {
                "args": [
                    "cstring",
                    "function"
                ],
                "description": "Asynchronously precaches a DOTA item by its dota_npc_items.txt name, provides a callback when it's finished.",
                "return": "void",
                "arg_names": [
                    "itemName",
                    "callback"
                ]
            },
            "PrecacheUnitByNameAsync": {
                "args": [
                    "cstring",
                    "function",
                    "int"
                ],
                "description": "Asynchronously precaches a DOTA unit by its dota_npc_units.txt name, provides a callback when it's finished.",
                "return": "void",
                "arg_names": [
                    "unitName",
                    "callback",
                    "playerID"
                ]
            },
            "RandomFloat": {
                "args": [
                    "float",
                    "float"
                ],
                "description": "Get a random float within a range",
                "return": "float",
                "arg_names": [
                    "min",
                    "max"
                ]
            },
            "RandomInt": {
                "args": [
                    "int",
                    "int"
                ],
                "description": "Get a random int within a range",
                "return": "int",
                "arg_names": [
                    "min",
                    "max"
                ]
            },
            "RandomVector": {
                "args": [
                    "float"
                ],
                "description": "Get a random 2D vector of the given length.",
                "return": "vector",
                "arg_names": [
                    "length"
                ]
            },
            "RollPercentage": {
                "args": [
                    "int"
                ],
                "description": "Rolls a number from 1 to 100 and returns true if the roll is less than or equal to the number specified",
                "return": "bool",
                "arg_names": [
                    "successPercentage"
                ]
            },
            "Say": {
                "args": [
                    "CBaseEntity",
                    "cstring",
                    "bool"
                ],
                "description": "Have Entity say string, and teamOnly or not",
                "return": "void",
                "arg_names": [
                    "entity",
                    "message",
                    "teamOnly"
                ]
            },
            "ScreenShake": {
                "args": [
                    "vector",
                    "float",
                    "float",
                    "float",
                    "float",
                    "int",
                    "bool"
                ],
                "description": "Start a screenshake with the following parameters. vecCenter, flAmplitude, flFrequency, flDuration, flRadius, eCommand( SHAKE_START = 0, SHAKE_STOP = 1 ), bAirShake",
                "return": "void",
                "arg_names": [
                    "center",
                    "amplitude",
                    "frequency",
                    "duration",
                    "radius",
                    "eCommand",
                    "airShake"
                ]
            },
            "SendOverheadEventMessage": {
                "args": [
                    "CDOTAPlayer",
                    "int",
                    "CDOTA_BaseNPC",
                    "int",
                    "CDOTAPlayer"
                ],
                "description": "( DOTAPlayer sendToPlayer, int iMessageType, Entity targetEntity, int iValue, DOTAPlayer sourcePlayer ) - sendToPlayer and sourcePlayer can be nil - iMessageType is one of OVERHEAD_ALERT_*",
                "return": "void",
                "arg_names": [
                    "player",
                    "messageType",
                    "unit",
                    "value",
                    "sourcePlayer"
                ]
            },
            "SetTeamCustomHealthbarColor": {
                "args": [
                    "DOTATeam_t",
                    "int",
                    "int",
                    "int"
                ],
                "description": "( teamNumber, r, g, b )",
                "return": "void",
                "arg_names": [
                    "team",
                    "r",
                    "g",
                    "b"
                ]
            },
            "SpawnEntityFromTableSynchronous": {
                "args": [
                    "cstring",
                    "table"
                ],
                "description": "Synchronously spawns a single entity from a table",
                "return": "CBaseEntity",
                "arg_names": [
                    "baseclass",
                    "data"
                ]
            },
            "UTIL_Remove": {
                "args": [
                    "CBaseEntity"
                ],
                "description": "Removes the specified entity",
                "return": "void",
                "arg_names": [
                    "hEntity"
                ]
            },
            "UTIL_RemoveImmediate": {
                "args": [
                    "CBaseEntity"
                ],
                "description": "Immediately removes the specified entity",
                "return": "void",
                "arg_names": [
                    "hEntity"
                ]
            }
        }
    },
    "ProjectileManager": {
        "functions": {
            "CreateLinearProjectile": {
                "args": [
                    "table"
                ],
                "description": "Creates a linear projectile and returns the projectile ID",
                "return": "ProjectileID",
                "arg_names": [
                    "projectileData"
                ]
            },
            "CreateTrackingProjectile": {
                "args": [
                    "table"
                ],
                "description": "Creates a tracking projectile",
                "return": "ProjectileID!",
                "arg_names": [
                    "projectileData"
                ]
            },
            "DestroyLinearProjectile": {
                "args": [
                    "ProjectileID"
                ],
                "description": "Destroys the linear projectile matching the argument ID",
                "return": "void",
                "arg_names": [
                    "projectile"
                ]
            },
            "GetLinearProjectileLocation": {
                "args": [
                    "ProjectileID"
                ],
                "description": "Returns current location of projectile",
                "return": "vector",
                "arg_names": [
                    "projectile"
                ]
            },
            "GetLinearProjectileRadius": {
                "args": [
                    "ProjectileID"
                ],
                "description": "Returns current radius of projectile",
                "return": "float",
                "arg_names": [
                    "projectile"
                ]
            },
            "GetLinearProjectileVelocity": {
                "args": [
                    "ProjectileID"
                ],
                "description": "Returns a vector representing the current velocity of the projectile.",
                "return": "vector",
                "arg_names": [
                    "projectile"
                ]
            },
            "ProjectileDodge": {
                "args": [
                    "CDOTA_BaseNPC"
                ],
                "description": "Makes the specified unit dodge projectiles",
                "return": "void",
                "arg_names": [
                    "unit"
                ]
            },
            "UpdateLinearProjectileDirection": {
                "args": [
                    "ProjectileID",
                    "vector",
                    "float"
                ],
                "description": "Update velocity",
                "return": "void",
                "arg_names": [
                    "projectile",
                    "direction",
                    "speed"
                ]
            }
        }
    }
}
